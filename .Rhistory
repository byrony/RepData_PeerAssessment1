xu/q1
xu/q2
?caret
?caret
library(caret)
?caret
??caret
?bayes
??bayes
?train
library(caret)
install.packages(caret)
install.packages('caret')
help.start(rpart)
?klaR
??klaR
library(klaR)
library(MASS)
library(klaR)
?klaR
??klaR
?NaiveBayes
qf(0.9, 10*3,10-1)
qf(0.9, 29,9)
qf(0.9, 20*3, 10-1)
qf(0.9, 20*3, 19)
qf(0.95, 9,30)
qf(0.95, 19,30)
qf(0.95, 9, 60)
qf(0.95, 9,31)
qf(0.95, 9,29)
mse <- 19.6875
sqrt(mse/2)*3.1526
qt(1-0.05,12)
qt91-0.05/2,12
qt(1-0.05/2,12)
qt(1-0.05/6,12)
qt((1,12))
qt(1,12)
qt(1-0.000000000000001,12)
22/6
25/6
5/6
4/6
1.4/6
5+7+8+9+4+1
3.4/6
3.4/6+90
7+6+5+6+8+9
4.1/6+90
qtukey(1-0.05, 3,9)
3.948492/sqrt(2)*sqrt(2*0.017778/6)
qt(1-0.05/6, 9)
qf(1-0.05, 2,9)
?dunnett
qNCDun()
qt(1-0.05/6, 13)
qtukey(1-0.05, 2, 13)
qtukey(1-0.05, 3,13)
0.150556/0.017222
qtukey(1-0.05, 3,4 )
0.0002778*2+0.06111
0.01778-0.0002778*2
qf(1-0.05, 1,12)
qf(1-0.05, 3, 12)
qt(1-0.05/2, 12)
qt(1-0.05/6,12)
qt(1-0.05/8, 12)
qt(1-0.05/12, 12)
qt(1-0.05/2, 6)
qtukey(1-0.05, 4, 8)
qt<-4.52881
qt*sqrt(2.16667/3)
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
class(spam)
str(spam)
str(spam$make)
head(spam$make)
head(spam$address)
dim(spam$make)
dim(spam)
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
dim(trainIndicator)
str(trainIndicator)
?rbinom
sum(trainIndicator)
trainIndicator = rbinom(4601, size = 2, prob = 0.5)
str(trainIndicator)
sum(trainIndicator)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
sum(trainIndicator)
table(trainIndicator)
table <-table(trainIndicator)
table
class(table)
dim(table)
table[1]
table[2]
table[1]+1
class(table[1])
table[1]/4
names(spam)
?table
str(span$type)
str(spam$type)
plot(log10(trainSpam$capitalAve) ~ trainSpam$type)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
plot(log10(trainSpam$capitalAve) ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:2] + 1))
plot(trainSpam[, 1:4])
plot(trainSpam[, 1:2])
?dist
?t
?matrix
test <- matrix(c(2,3,1,4,2,5), nrow=3, ncol=2)
test
t(test)
dist(t(test))
?dist
dist(test)
?dist
head(trainSpam[, 1:57])
hclust(dist(log10(trainSpam[, 1:55] + 1)))
h<-hclust(dist(t(log10(trainSpam[, 1:55] + 1))))
plot(h)
t<-hclust(dist(log10(trainSpam[, 1:55] + 1)))
plot(t)
str(spam$numType)
str(spam$type)
head(spam$type)
str(as.numeric(spam$type))
table(str(as.numeric(spam$type)))
table(as.numeric(spam$type))
?reformulate
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
lmFormula = reformulate(names(trainSpam)[1], response = "numType")
lmFormula
head(spam$numType)
head(spam$delta)
?cv
library(boot)
?cv
?cv.glm
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for (i in 1:55) {
# creates formula with one variable and the result
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
# cross validated error
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
# Which predictor has minimum cross-validated error?
names(trainSpam)[which.min(cvError)]
cvError
names(trainSpam)[which.min(cvError)]
costFunction = function(x, y) sum(x != (y > 0.5))
costFunction
costFunction(2,3)
costFunction(1,1)
costFunction(1,0)
cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
cv.glm(trainSpam, glmFit, costFunction, 2)$delta[1]
predictionModel = glm(numType ~ charDollar,family="binomial",data=trainSpam)
predictionTest = predict(predictionModel,testSpam)
head(predictionest)
head(predictionTest)
dim(dimSpam)
dim(testSpam)
str(predictionTest)
predictedSpam = rep("nonspam",dim(testSpam)[1])
predictedSpam[predictionModel$fitted > 0.5] = "spam"
table(predictedSpam, testSpam$type)
t
test
table(test)
?table
table(predictedSpam, testSpam$type)
table(predictedSpam)
table( testSpam$type)
confusionMatrix
library(caret)
confusionMatrix(predictedSpam, testSpam$type)
table(predictedSpam, testSpam$type)
str(predictedSpam)
names(trainSpam)[which.min(cvError)]
str(spam$charDollar)
This is my first R markdown file.
#This is my first R markdown file.
My First R Markdown File
=====================
#This is my first R markdown file.
---
title: "R Markdown_demo"
author: "xiang"
date: "Wednesday, May 13, 2015"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
# Title?
?par
x<- rnorm(100)
y <- x+ rnorm(100, sd=0.5)
plot(x,y)
par(las=1)
plot(x,y)
plot(x,y)
par(las=2)
plot(x,y)
par(las=1)
plot(x,y)
library(dataset)
library(datasets)
data(airquality)
fit <- lm(Ozone ~ Wind+Temp+Solar.R, data=airquality)
fit
summary(fit)
install.packages(xtable)
install.packages('xtable')
summary(fit)
fit
xtable(summary(fit))
library(xtable)
xtable(summary(fit))
xt <- xtable(summary(fit))
print(xt)
print(xt, type='html')
data
dir <- 'D:/Coursera/5. Reproducible Research/Assessments'
setwd(dir)
data <- read.csv('activity.csv')
head(data)
?read.csv
dim(data)
str(data)
names(data)
data <- read.csv('activity.csv', header=TRUE, na.strings='NA')
str(data)
head(data)
summary(data$date)
?date
dir <- "D:/Coursera/4. Exploratory Data Analysis/Week 1/"
setwd(dir)
filename <- "household_power_consumption.txt"
head(filename)
dataset <- read.table(filename, header = TRUE, sep=";", na.strings = "?")
head(dataset)
str(dataset$Date)
?as.Date
daterange <- as.Date(c("2007/02/01", "2007/02/02"))
daterange
Date <- as.Date(strptime(Date, "%d/%m/%Y"))
Date <- as.Date(strptime(daterange, "%d/%m/%Y"))
Date
?strptime
as.Date(strptime(c("2007/02/01", "2007/02/02"), "%Y/%m/%d"))
Date <-as.Date(strptime(c("2007/02/01", "2007/02/02"), "%Y/%m/%d"))
class(Date)
head(data)
class(data$date)
str(data$interval)
data[5000:5020,]
Date <- as.Date(data$date)
head(Date)
class(Date)
str(Date)
?aggregate
meanNumber <- aggregate(x= data$steps, by=list(data$date), FUN=mean)
str(meanNumber)
head(meanNumber)
str(data$steps)
summary(data$steps)
meanNumber
meanNumber <- aggregate(x= data$steps, by=list(Date), FUN=mean)
str(meanNumber)
class(Date)
meanNumber
class(Date)
?hist
hist(meanNumber)
hist(meanNumber[,2])
hist(meanNumber[,2], main='Histgram of Steps', xlab='Total Number of Steps Each Day')
meanNumber <- aggregate(x= data$steps, by=list(data$date), FUN=sum)
hist(meanNumber[,2], main='Histgram of Steps', xlab='Total Number of Steps Each Day')
meanNumber
?fig.height
meanNumber
mean(meanNumber)
mean(meanNumber[,2])
median(meanNUmber[,2])
median(meanNumber[,2])
a <- c(2,3,4)
mean(a)
median(a)
a<- c(2,3,4,NA)
mean(a)
median(a)
?is.na
?mean
mean(a. na.rm=TRUE)
mean(a, na.rm=TRUE)
head(meanNumber)
totalNumber <- aggregate(x= data$steps, by=list(data$date), FUN=sum)
totalNumber <- totalNumber[,2]
hist(totalNumber, main='Histgram of Steps', xlab='Total Number of Steps Each Day')
?mean
?average
mean(totalNumber, na.rm=TRUE); median(totalNumber, na.rm=TRUE)
?hist
head(data)
?aggregate
mean.minutes <- aggegate(x=data$steps, by=list(data$interval), FUN=mean)
mean.minutes <- aggregate(x=data$steps, by=list(data$interval), FUN=mean)
head(mean.minutes)
mean.minutes <- aggregate(x=data$steps, by=list(data$interval), FUN=mean, na.rm=TRUE)
head(mean.minutes)
mean.minutes <- aggregate(x=data$steps, by=list(data$interval), FUN=mean, na.action=na.omit)
head(mean.minutes)
dim(mean.minutes)
?mean
mean.minutes <- aggregate(x=data$steps, by=list(data$interval), FUN=mean, na.rm=TRUE)
head(mean.minutes)
names(mean.minutes)
?plot
plot(mean.minutes[,1], mean.minutes[,2], type='l')
plot(mean.minutes[,1], mean.minutes[,2], type='l', main='Average daily activity', xlab='5-minutes interval', ylab='Average number of steps')
?hist
library(ggplot)
library(ggplot2)
?qplot
??binwidth
?qplot
max(mean.minutes[,2])
?which
mean.minutes[which(max(mean.minutes[,2]))]
mean.minutes[which.max(mean.minutes[,2])]
mean.minutes[,1][which.max(mean.minutes[,2])]
mean.minutes[which.max(mean.minutes[,2]),]
?aggregate
totalNumber <- aggregate(x= data$steps, by=list(data$date), FUN=sum)
head(totalNumber)
totalNumber <- aggregate(x= list(date=data$steps), by=list(data$date), FUN=sum)
head(totalNumber)
totalNumber <- aggregate(x= list(steps=data$steps), by=list(date=data$date), FUN=sum)
head(totalNumber)
totalNumber <- aggregate(x= list(steps=data$steps), by=list(date=data$date), FUN=sum)
hist(totalNumber$steps, main='Histgram of total number of steps each day', xlab='Total Number of Steps Each Day')
mean(totalNumber$steps, na.rm=TRUE); median(totalNumber$steps, na.rm=TRUE)
mean(totalNumber, na.rm=TRUE)
mean.minutes <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval), FUN=mean, na.rm=TRUE)
head(mean.minutes)
plot(mean.minutes$interval, mean.minutes$steps, type='l', main='Average daily activity', xlab='5-minutes interval', ylab='Average number of steps')
mean.minutes[which.max(mean.minutes$steps),]
summary(data)
head(totalNumber)
a
sum(is.na(a))
is.na(a)
sum(is.na(totalNumber))
sum(is.na(data))
?apply
?tapply
mean.day <- aggregate(x=list(steps=data$steps), by=list(date=data$date), FUN=mean)
head(mean.day)
mean.day <- aggregate(x=list(steps=data$steps), by=list(date=data$date), FUN=mean, na.rm=TRUE)
head(mean.day)
head(mean.minutes)
head(data)
data[1,]
dim(data[1,])
data[1,1]
?for
??for
help(for)
help('for')
dim(data)
help('if')
b=NA
b
is.na(B)
is.na(b)
head(mean.minutes)
mean.minutes$steps[which(mean.minutes$interval)==0]
mean.minutes$steps[which(mean.minutes$interval==0)]
for(i in data[,1]){if(is.na(i)) i=mean.minutes$steps[which(mean.minutes$interval==i)]}
head(data)
for(i in data[,1]){if(is.na(i)) data[i,1]=mean.minutes$steps[which(mean.minutes$interval==i)]}
for( i in a){print i}
print(3)
for(i in a){print(i)}
length(a)
for(i in 1:length(data$steps){if(is.na(data$steps[i])) data$steps[i]=mean.minutes$steps[which(mean.minutes$interval==i)]}
data$steps[i]=mean.minutes$steps[which(mean.minutes$interval==i)]}
for(i in 1:length(data$steps){
if(is.na(data$steps[i]))
data$steps[i]=mean.minutes$steps[which(mean.minutes$interval==i)]}
for(i in 1:length(data$steps){
if(is.na(data$steps[i])) {
data$steps[i]=mean.minutes$steps[which(mean.minutes$interval==i)]}}
for(i in 1:length(data$steps)){
if(is.na(data$steps[i]))
data$steps[i]=mean.minutes$steps[which(mean.minutes$interval==i)]}
data$steps[i]=mean.minutes$steps[which(mean.minutes$interval==data.steps[i])]}
for(i in 1:length(data$steps)){
if(is.na(data$steps[i]))
data$steps[i]=mean.minutes$steps[which(mean.minutes$interval==data.steps[i])]}
for(i in 1:length(data$steps)){
if(is.na(data$steps[i]))
data$steps[i]=mean.minutes$steps[which(mean.minutes$interval==data$steps[i])]}
a
for(i in 1:length(a)){
if(is.na(a[i]))
a[i]=mean(a, na.rm=TRUE)}
a
head(data)
head(mean.minutes)
for(i in 1:length(data$steps)){
if(is.na(data$steps[i]))
data$steps[i]=mean.minutes$steps[which(mean.minutes$interval==data$interval[i])]}
head(data)
?mapply
?weekdays
weekdays(data[1,2])
weekdays(as.Date(data[1,2]))
?as.Date
data$date <- as.Date(data$date, "%Y/%m/%d")
head(data)
data$date <- as.Date(data$date, "%Y-%m-%d")
head(data)
Sys.Date()
format(Sys.Date(), "%a %b %d")
b <- '2012-10-01'
as.Date(b)
as.Date(b, '%y-%m-%d' )
as.Date(b, strptime(b,'%y-%m-%d'))
as.Date(strptime(b,'%Y-%m-%d'))
strptime(b,'%Y-%m-%d')
strptime(b,'%y-%m-%d')
strptime(b,'%Y-%d-%m')
data$date <- as.Date(striptime(data$date, "%Y-%m-%d"))
data$date <- as.Date(strptime(data$date, "%Y-%m-%d"))
head(data)
b
as.Date(strptime(b,'%Y-%m-%d'))
data <- read.csv('activity.csv', header=TRUE, na.strings='NA')
dir <- 'D:/Coursera/5. Reproducible Research/Assessments'
setwd(dir)
data <- read.csv('activity.csv', header=TRUE, na.strings='NA')
data$date <- as.Date(strptime(data$date, "%Y-%m-%d"))
head(data$date)
head(data)
data$date <- as.Date(strptime(data$date, "%Y-%m-%d"))
head(data)
?weekday()
?weekday
?weekdays
data$weekdays <- weekdays(data$date)
head(data)
str(data$weekdays)
summary(data$weekdays)
str(as.factor(data$weekdays))
?sapply
?tapply
?apply
?sapply
weekdays.weekend <- function(date){
day <- weekdays(date)
if(day %in% c('Saturday', 'Sunday'))
return('weekend')
else
return('weekday')
}
data$weekdays <- sapply(data$date, FUN=weekdays.weekend)
head(data)
summary(data)
class(data$weekdays)
data$weekdays2 <- lapply(data$date, FUN=weekdays.weekend)
head(data)
class(data$weekdays2)
str(data)
data$weekdays2 <- apply(data$date, FUN=weekdays.weekend)
data$weekdays2 <- mapply(data$date, FUN=weekdays.weekend)
str(data)
?aggregate
mean.minutes <- aggregate(x=list(steps=data$steps), by=list(interval=c(data$interval,data$weekdays), FUN=mean, na.rm=TRUE)
mean.minutes <- aggregate(x=list(steps=data$steps), by=list(interval=c(data$interval,data$weekdays)), FUN=mean, na.rm=TRUE)
mean.minutes <- aggregate(x=list(steps=data$steps), by=list(interval=data$interval), FUN=mean, na.rm=TRUE)
head(mean.minutes)
mean.minutes <- aggregate(x=steps, by=list(interval=interval+weekdays),data=data, FUN=mean, na.rm=TRUE)
mean.minutes <- aggregate(steps, by=list(interval=interval+weekdays),data=data, FUN=mean, na.rm=TRUE)
mean.minutes <- aggregate(x=data$steps, by=list(interval=interval+weekdays),data=data, FUN=mean, na.rm=TRUE)
mean.minutes <-aggregate(steps ~ interval + day, data=filled.data, mean)
mean.minutes <-aggregate(steps ~ interval + day, data=data, mean)
mean.minutes <-aggregate(steps ~ interval + weekdays, data=data, mean)
head(mean.minutes)
